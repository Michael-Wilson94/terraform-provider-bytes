trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.2.8'
  providerName: 'bytes'
  gnupgVersion: '2.4.3'

steps:
- task: DownloadSecureFile@1
  name: gpgKey
  inputs:
    secureFile: 'private-key.gpg'

- script: |
    echo "Checking the GPG key file..."
    ls -lh $(gpgKey.secureFilePath)
    sha256sum $(gpgKey.secureFilePath)
  displayName: 'Check GPG Key File'

- script: |
    sudo apt-get update
    sudo apt-get install -y wget build-essential libbz2-dev zlib1g-dev libsqlite3-dev libssl-dev libreadline-dev libffi-dev
    sudo apt-get install -y libassuan-dev libnpth0-dev
  displayName: 'Install Dependencies'

- script: |
    wget https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.46.tar.bz2
    tar -xvjf libgpg-error-1.46.tar.bz2
    cd libgpg-error-1.46
    ./configure
    make
    sudo make install
  displayName: 'Install libgpg-error'

- script: |
    wget https://gnupg.org/ftp/gcrypt/libksba/libksba-1.6.3.tar.bz2
    tar -xvjf libksba-1.6.3.tar.bz2
    cd libksba-1.6.3
    ./configure
    make
    sudo make install
  displayName: 'Install libksba'

- script: |
    wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-$(gnupgVersion).tar.bz2
    tar -xvjf gnupg-$(gnupgVersion).tar.bz2
    cd gnupg-$(gnupgVersion)
    ./configure
    make
    sudo make install
  env:
    gnupgVersion: $(gnupgVersion)
  displayName: 'Download and Install GnuPG'

- script: |
    gpg --version
  displayName: 'Verify GnuPG Installation'

- script: |
    version=$(git describe --tags $(git rev-list --tags --max-count=1))
    echo "##vso[task.setvariable variable=releaseVersion]$version"
    echo $version
  displayName: 'Get Version Number from Tag'

- script: |
    sudo apt-get update
    sudo apt-get -y install wget
    wget https://golang.org/dl/go1.21.3.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz
    echo "##vso[task.prependpath]/usr/local/go/bin"
  displayName: 'Install Go'


- script: |
    go version
    echo "Importing GPG Key..."
    gpg --version
    gpg-agent --version
    ls -l $(gpgKey.secureFilePath)
    gpg --verbose --import $(gpgKey.secureFilePath) || true
    echo "Killing all GPG-related processes..."
    gpgconf --kill all
    echo "Restarting GPG agent..."
    gpg-agent --daemon
    echo "listing keys"
    gpg --list-secret-keys --keyid-format LONG
    echo "Building and Signing the Terraform provider..."
    echo "$(GpgPassphrase)"
    go build -o terraform-provider-$(providerName)
    gpg --batch --yes --passphrase $(GpgPassphrase) --detach-sign terraform-provider-myprovider
  displayName: 'Build and Sign Terraform Provider'


- script: |
    echo "Creating a GitHub Release..."
    echo "user email $(userEmail)"
    # Install required tools
    wget https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz
    tar -zxvf hub-linux-amd64-2.14.2.tgz
    sudo ./hub-linux-amd64-2.14.2/install
    # Configure hub
    hub config --global user.name $(userName)
    hub config --global user.email $(userEmail)
    echo $(githubToken) | gh auth login --with-token
    # Create GitHub release
    hub release create -a terraform-provider-myprovider -m "Release v$(releaseVersion)" v$(releaseVersion)
  displayName: 'Create GitHub Release'
